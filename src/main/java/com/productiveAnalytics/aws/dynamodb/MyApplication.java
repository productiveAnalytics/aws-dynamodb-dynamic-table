/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.productiveAnalytics.aws.dynamodb;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.concurrent.CompletableFuture;

import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.dynamodb.DynamoDbAsyncClient;
import software.amazon.awssdk.services.dynamodb.DynamoDbClient;
import software.amazon.awssdk.services.dynamodb.model.AttributeDefinition;
import software.amazon.awssdk.services.dynamodb.model.BackupDetails;
import software.amazon.awssdk.services.dynamodb.model.BillingMode;
import software.amazon.awssdk.services.dynamodb.model.CreateTableRequest;
import software.amazon.awssdk.services.dynamodb.model.CreateTableResponse;
import software.amazon.awssdk.services.dynamodb.model.DeleteTableRequest;
import software.amazon.awssdk.services.dynamodb.model.DeleteTableResponse;
import software.amazon.awssdk.services.dynamodb.model.DescribeTableRequest;
import software.amazon.awssdk.services.dynamodb.model.DescribeTableResponse;
import software.amazon.awssdk.services.dynamodb.model.KeySchemaElement;
import software.amazon.awssdk.services.dynamodb.model.KeyType;
import software.amazon.awssdk.services.dynamodb.model.ProvisionedThroughput;
import software.amazon.awssdk.services.dynamodb.model.RestoreTableFromBackupRequest;
import software.amazon.awssdk.services.dynamodb.model.RestoreTableFromBackupResponse;
import software.amazon.awssdk.services.dynamodb.model.ScalarAttributeType;
import software.amazon.awssdk.services.dynamodb.model.TableDescription;
import software.amazon.awssdk.services.dynamodb.model.TableStatus;
import software.amazon.awssdk.services.dynamodb.model.CreateBackupRequest;
import software.amazon.awssdk.services.dynamodb.model.CreateBackupResponse;

public class MyApplication {
	private static final String HASH_KEY  = "name";
	private static final String RANGE_KEY = "priority";
	
	private static final DynamoDbClient DDB_SYNC_CLIENT 		= DynamoDbClient.builder().region(Region.US_EAST_1).build();
	private static final DynamoDbAsyncClient DDB_ASYNC_CLIENT 	= DynamoDbAsyncClient.create();
	
	private static final DateFormat DATE_FORMAT = new SimpleDateFormat("yyyyMMdd-HH.mm.ss");
	
    public String getGreeting() {
        return "Hello DynamoDB.";
    }
    
    public void deleteTableIfExistsAsynch(String ddbTableName) {
    	DescribeTableRequest descTableReq = DescribeTableRequest.builder()
    										  				    .tableName(ddbTableName)
    															.build();
    	CompletableFuture<DescribeTableResponse> descTableResFuture = DDB_ASYNC_CLIENT.describeTable(descTableReq);
    	CompletableFuture<TableDescription> descTableRes = descTableResFuture.thenApply(DescribeTableResponse::table);
    	
    	descTableRes.whenComplete((tblDesc, err) -> {
    								System.out.println("DEBUG: "+ ddbTableName + " has status "+ tblDesc.tableStatusAsString());
    								switch (tblDesc.tableStatus())
    								{
    									case ACTIVE:
    										DeleteTableRequest deleteTableReq = DeleteTableRequest.builder().tableName(ddbTableName).build();
    										DeleteTableResponse deleteTableRes = DDB_SYNC_CLIENT.deleteTable(deleteTableReq);
    										System.out.println("DEBUG: Deleting "+ ddbTableName + " status: "+ tblDesc.tableStatusAsString());
    										return;
    										
    									default:
    										// do nothing
    										return;
    								}
    							  }
    							 );
    }
    
	public boolean deleteTableIfExists(String ddbTableName) {
		DescribeTableRequest descTableReq = DescribeTableRequest.builder()
											  				    .tableName(ddbTableName)
																.build();
		DescribeTableResponse descTableRes = DDB_SYNC_CLIENT.describeTable(descTableReq);
		TableDescription tblDesc;
		tblDesc = descTableRes.table();
		
		switch (tblDesc.tableStatus())
		{
			case ACTIVE:
				DeleteTableRequest deleteTableReq = DeleteTableRequest.builder().tableName(ddbTableName).build();
				DeleteTableResponse deleteTableRes = DDB_SYNC_CLIENT.deleteTable(deleteTableReq);
				tblDesc = deleteTableRes.tableDescription();
				System.out.println("DEBUG: Deleting "+ ddbTableName + " status: "+ tblDesc.tableStatusAsString());
				return true;
				
			default:
				// do nothing
				return false;
		}

	}    
    
    public String createDynamicTable(String ddbTableName, BillingMode billingMode) {
    	
    	CreateTableRequest.Builder createTableReqBuilder
    									= CreateTableRequest.builder()
    											.attributeDefinitions
    													(AttributeDefinition.builder()
																.attributeName(HASH_KEY)
																.attributeType(ScalarAttributeType.S)
																.build(),
    													AttributeDefinition.builder()
    															.attributeName(RANGE_KEY)
    															.attributeType(ScalarAttributeType.N)
    															.build()
    													)
    											.keySchema
    													(KeySchemaElement.builder()
    															.attributeName(HASH_KEY)
    															.keyType(KeyType.HASH)
    															.build(),
    												     KeySchemaElement.builder()
    															.attributeName(RANGE_KEY)
    															.keyType(KeyType.RANGE)
    															.build()
    													);
    	if (BillingMode.PAY_PER_REQUEST.equals(billingMode)) {
    		createTableReqBuilder.billingMode(BillingMode.PAY_PER_REQUEST);
    	} else {
    		createTableReqBuilder.provisionedThroughput
    								(ProvisionedThroughput.builder()
    										.readCapacityUnits(10L)
    										.writeCapacityUnits(10L)
    										.build()
    								);
    	}
    	
    	CreateTableRequest createTableReq = createTableReqBuilder
    											.tableName(ddbTableName)
    											.build();

    	CreateTableResponse createTableRes = DDB_SYNC_CLIENT.createTable(createTableReq);
    	TableDescription tableDesc = createTableRes.tableDescription();
    	String newTableArn = "CREATING-NEW-TABLE";
    	if (tableDesc != null) {
    		newTableArn = tableDesc.tableArn();
    		System.out.println(tableDesc.tableStatusAsString() +" table "+ newTableArn);
    	}
    	return newTableArn;
    }
    
    public String createCopyByBackup(String existingTableName, String backupTableName) throws InterruptedException {
    	DescribeTableRequest descExistingTableReq = DescribeTableRequest.builder()
    															.tableName(existingTableName)
    															.build();
    	DescribeTableResponse descExistingTableRes = DDB_SYNC_CLIENT.describeTable(descExistingTableReq);
    	TableDescription tableDesc; 
    	tableDesc = descExistingTableRes.table();
    	
    	if (TableStatus.ACTIVE.equals(tableDesc.tableStatus()))
    	{	
    		String backupName = existingTableName + "_backup_"+ DATE_FORMAT.format(new Date());
	    	CreateBackupRequest backupReq = CreateBackupRequest.builder()
	    											.tableName(existingTableName)
	    											.backupName(backupName)
	    											.build();
	    	CreateBackupResponse backupRes = DDB_SYNC_CLIENT.createBackup(backupReq);
	    	BackupDetails backupDetails = backupRes.backupDetails();
	    	String backupArn = backupDetails.backupArn();
	    	
	    	System.out.println("Backup Arn : "+ backupArn + " Status : "+ backupDetails.backupStatusAsString());
	    	
	    	int timeOutInSecs;
	    	timeOutInSecs = 5 * 60 * 1000; // (int)(Math.random() * 5000);
	    	System.out.println("Waiting for "+ timeOutInSecs +" milli seconds");
	    	Thread.sleep(timeOutInSecs);
	    	
	    	RestoreTableFromBackupRequest restoreBackupReq = RestoreTableFromBackupRequest.builder()
	    																.backupArn(backupArn)
	    																.targetTableName(backupTableName)
	    																.build();
	    	RestoreTableFromBackupResponse restoreBackupRes = DDB_SYNC_CLIENT.restoreTableFromBackup(restoreBackupReq);
	    	
	    	timeOutInSecs = 2 * 60 * 1000; // (int)(Math.random() * 5000);
	    	System.out.println("Waiting for "+ timeOutInSecs +" milli seconds");
	    	Thread.sleep(timeOutInSecs);
	    	
	    	tableDesc = restoreBackupRes.tableDescription();
	    	
	    	System.out.println("Creating table : "+ backupTableName + " from backup...Status : "+ tableDesc.tableStatusAsString());
	    	return tableDesc.tableArn();
    	} else {
    		throw new RuntimeException(String.format("Table %s is not fully avaialble. Current status: %s", existingTableName, tableDesc.tableStatusAsString()));
    	}
    }

    public static void main(String[] args) {
    	MyApplication testApp = new MyApplication();
        System.out.println(testApp.getGreeting());
        
    	String tblName = "hds_dynamic_table";
    	if (args.length > 0) {
    		tblName = args[0];
    	}
    	String createdTableName = testApp.createDynamicTable(tblName, BillingMode.PAY_PER_REQUEST);
    	System.out.println("Created table : "+ createdTableName);
    }
}
