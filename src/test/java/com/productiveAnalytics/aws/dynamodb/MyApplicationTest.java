/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.productiveAnalytics.aws.dynamodb;

import org.junit.jupiter.api.Test;

import software.amazon.awssdk.services.dynamodb.model.BillingMode;

import static org.junit.jupiter.api.Assertions.*;

import java.util.Random;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Order;

public class MyApplicationTest {
    private static MyApplication classUnderTest = new MyApplication();
	
	@BeforeAll
	public static void setUp() {
		classUnderTest = new MyApplication();
	}
	
    @Test 
    public void testAppHasAGreeting() {
        assertNotNull("MyApplication should have a greeting", classUnderTest.getGreeting());
    }
    
    @Test
    @Order(1)
    public void testDDBTableProvisionedCreation() {
    	String tableToCreate = "hds_test_table_provisioned";
    	String tableArn = null;
    	try {
    		tableArn = classUnderTest.createDynamicTable(tableToCreate, BillingMode.PROVISIONED);
    	} catch (Exception e) {
    		e.printStackTrace(System.err);
    		fail("Error while creating table with Providisioned Throughput");
    	}
    	System.out.println("Provisioned table: "+ tableArn);
    	assertNotNull("MyApplication should have created DDB table with Provision (R=10, W=10)", tableArn);
    }
    
    @Test
    @Order(2)
    public void testDDBTablePayPerReqCreation() {
    	String tableToCreate = "hds_test_table_pay_per_req";
    	String tableArn = null;
    	try {
    		tableArn = classUnderTest.createDynamicTable(tableToCreate, BillingMode.PAY_PER_REQUEST);
    	} catch (Exception e) {
    		e.printStackTrace(System.err);
    		fail("Error while creating table with BillingMode "+ BillingMode.PAY_PER_REQUEST);
    	}
    	System.out.println("Pay-per-request table: "+ tableArn);
    	assertNotNull("MyApplication should have created DDB table w/ Pay-per-reqest", tableArn);
    }
    
    @Test
    @Order(3)
    public void testDDBTableBackup() throws InterruptedException {
    	String baseName = "hds_test_table_pay_per_req";
    	String origTableName   = baseName + "_orig";
    	String backupTableName = baseName + "_copy";
    	
//    	classUnderTest.createDynamicTable(origTableName, BillingMode.PAY_PER_REQUEST);
    	
    	int timeOutInSecs = (int)(Math.random() * 10000);
    	System.out.println("Waiting for "+ timeOutInSecs +" seconds");
    	Thread.sleep(timeOutInSecs);
      	
    	String backupArn = classUnderTest.createCopyByBackup(origTableName, backupTableName);
    	System.out.println("Copy of Pay-per-request table: "+ backupArn);
    	assertNotNull("MyApplication should have created copy of DDB table w/ Pay-per-reqest", backupArn);
    }
}
