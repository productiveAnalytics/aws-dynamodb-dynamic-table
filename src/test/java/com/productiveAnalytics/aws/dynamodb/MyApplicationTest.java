/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.productiveAnalytics.aws.dynamodb;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.fail;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;

import software.amazon.awssdk.services.dynamodb.model.BillingMode;
import software.amazon.awssdk.services.dynamodb.model.DynamoDbException;

public class MyApplicationTest {
	private static final String TABLE_TO_CREATE_PROVISIONED = "hds_test_table_provisioned";
	private static final String TABLE_TO_CREATE_PAY_PER_REQ = "hds_test_table_pay_per_req";
	
	private static final String baseName = "hds_test_table_pay_per_req";
	private static final String origTableName   = baseName + "_orig";
	private static final String backupTableName = baseName + "_copy";
	
    private MyApplication classUnderTest;
	
	@BeforeEach
	public void setUp() {
		this.classUnderTest = new MyApplication();
		this.cleanUp();
	}
	
	@AfterAll
	public static void tearDownAll() {
		new MyApplicationTest().cleanUp();
	}
	
	private void cleanUp() {
		try 
		{
			System.err.println("CLEAN-UP: Deleting table "+ TABLE_TO_CREATE_PROVISIONED);
			this.classUnderTest.deleteTableIfExists(TABLE_TO_CREATE_PROVISIONED);
		} catch (DynamoDbException ddbTableEx) {
			System.err.println(ddbTableEx.getMessage());
		}
		
		try 
		{
			System.err.println("CLEAN-UP: Deleting table "+ TABLE_TO_CREATE_PAY_PER_REQ);
			this.classUnderTest.deleteTableIfExists(TABLE_TO_CREATE_PAY_PER_REQ);
		} catch (DynamoDbException ddbTableEx) {
			System.err.println(ddbTableEx.getMessage());
		}
		
		try 
		{
			System.err.println("CLEAN-UP: Deleting table "+ origTableName);
			this.classUnderTest.deleteTableIfExists(origTableName);
		} catch (DynamoDbException ddbTableEx) {
			System.err.println(ddbTableEx.getMessage());
		}
		
		try 
		{
			System.err.println("CLEAN-UP: Deleting table "+ backupTableName);
			this.classUnderTest.deleteTableIfExists(backupTableName);
		} catch (DynamoDbException ddbTableEx) {
			System.err.println(ddbTableEx.getMessage());
		}
	}
	
    @Test 
    public void testAppHasAGreeting() {
        assertNotNull("MyApplication should have a greeting", classUnderTest.getGreeting());
    }
    
    @Test
    @Order(1)
    public void testDDBTableProvisionedCreation() {
    	String tableArn = null;
    	try {
    		tableArn = classUnderTest.createDynamicTable(TABLE_TO_CREATE_PROVISIONED, BillingMode.PROVISIONED);
    	} catch (Exception e) {
    		e.printStackTrace(System.err);
    		fail("Error while creating table with Providisioned Throughput");
    	}
    	System.out.println("Provisioned table: "+ tableArn);
    	assertNotNull("MyApplication should have created DDB table with Provision (R=10, W=10)", tableArn);
    }
    
    @Test
    @Order(2)
    public void testDDBTablePayPerReqCreation() {
    	String tableArn = null;
    	try {
    		tableArn = classUnderTest.createDynamicTable(TABLE_TO_CREATE_PAY_PER_REQ, BillingMode.PAY_PER_REQUEST);
    	} catch (Exception e) {
    		e.printStackTrace(System.err);
    		fail("Error while creating table with BillingMode "+ BillingMode.PAY_PER_REQUEST);
    	}
    	System.out.println("Pay-per-request table: "+ tableArn);
    	assertNotNull("MyApplication should have created DDB table w/ Pay-per-reqest", tableArn);
    }
    
    @Test
    @Order(3)
    public void testDDBTableBackup() throws InterruptedException {
    	classUnderTest.createDynamicTable(origTableName, BillingMode.PAY_PER_REQUEST);
    	
    	int timeOutInSecs = 3 * 60 * 1000; // (int)(Math.random() * 5000);
    	System.out.println("Waiting for "+ timeOutInSecs +" milli seconds");
    	Thread.sleep(timeOutInSecs);
      	
    	String backupArn = classUnderTest.createCopyByBackup(origTableName, backupTableName);
    	System.out.println("Copy of Pay-per-request table: "+ backupArn);
    	assertNotNull("MyApplication should have created copy of DDB table w/ Pay-per-reqest", backupArn);
    }
}
